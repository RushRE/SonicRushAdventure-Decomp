#ifndef RUSH_NETWORKERRORMENU_H
#define RUSH_NETWORKERRORMENU_H

#include <game/system/task.h>
#include <game/text/fontAnimator.h>
#include <game/text/fontWindow.h>
#include <game/text/fontWindowAnimator.h>
#include <game/graphics/sprite.h>

// --------------------
// ENUMS
// --------------------

enum Dmwf_Lang_SequenceIDs
{
    DMWF_MSGSEQ_SAVING,
    DMWF_MSGSEQ_SAVING_RANKING_INFO,
    DMWF_MSGSEQ_PLAY_AGAINST_FRIEND_WHO_HAS_COPY_OF_GAME,
    DMWF_MSGSEQ_PLAY_AGAINST_FRIEND_WHO_DOESNT_HAVE_COPY_OF_GAME,
    DMWF_MSGSEQ_PLAY_OVER_WIFI,
    DMWF_MSGSEQ_CHECK_WIRELESS_SETTINGS,
    DMWF_MSGSEQ_SEARCH_FOR_CHALLENGERS,
    DMWF_MSGSEQ_SEARCH_FOR_OTHER_PLAYERS,
    DMWF_MSGSEQ_ACCEPTING_PLAYERS,
    DMWF_MSGSEQ_SEARCHING_FOR_PLAYERS,
    DMWF_MSGSEQ_PLEASE_SELECT_AN_OPPONENT,
    DMWF_MSGSEQ_WHOEVER_REACHES_GOAL_FIRST_IS_WINNER,
    DMWF_MSGSEQ_WHOEVER_COLLECTS_MOST_RINGS_IS_WINNER,
    DMWF_MSGSEQ_PLAY_OVER_WFC,
    DMWF_MSGSEQ_CONFIRM_FRIEND_CODE_AND_REGISTER_FRIEND_CODES,
    DMWF_MSGSEQ_EDIT_WFC_SETTINGS,
    DMWF_MSGSEQ_PLAY_WITH_RANDOM_PLAYER_WHO_SELECTED_SAME_GAMEMODE,
    DMWF_MSGSEQ_PLAY_AGAINST_REGISTERED_FRIEND,
    DMWF_MSGSEQ_CHECK_YOUR_FRIEND_ROSTER,
    DMWF_MSGSEQ_ENTER_ANOTHER_PLAYERS_FRIENDCODE_TO_ADD_THEM,
    DMWF_MSGSEQ_CONFIRM_YOUR_FRIEND_CODE_HERE,
    DMWF_MSGSEQ_YOUR_FRIEND_ROSTER_DISPLAYS_NAMES_BASED_ON_MOST_RECENTLY_PLAYED,
    DMWF_MSGSEQ_DO_YOU_REALLY_WANT_TO_DELETE_THIS,
    DMWF_MSGSEQ_PLEASE_ENTER_FRIEND_CODE,
    DMWF_MSGSEQ_FRIEND_CODE_REGISTERED,
    DMWF_MSGSEQ_YOUR_FRIEND_CODE,
    DMWF_MSGSEQ_YOU_DO_NOT_HAVE_A_FRIEND_CODE,
    DMWF_MSGSEQ_YOU_CANNOT_SELECT_FRIEND_MATCH_BECAUSE_NO_FRIENDS_IN_ROSTER,
    DMWF_MSGSEQ_YOUR_WIFI_CONNECTION_INFO_MAY_HAVE_BEEN_ERASED,
    DMWF_MSGSEQ_CONNECT_TO_WIFI_CONNECTION,
    DMWF_MSGSEQ_WIFI_CONNECTION_TREATS_GAME_AND_SYSTEM_AS_A_SET,
    DMWF_MSGSEQ_WIFI_CONNECTION_USER_INFO_HAS_BEEN_SAVED_TO_GAME_CARD,
    DMWF_MSGSEQ_UNABLE_TO_CONNECT_TO_WIFI_BECAUSE_GAME_AND_SYSTEM_DONT_MATCH,
    DMWF_MSGSEQ_WANT_TO_UPDATE_WIFI_USER_INFO_ON_CARD,
    DMWF_MSGSEQ_DO_YOU_STILL_WANT_TO_UPDATE,
    DMWF_MSGSEQ_CONNECTING_TO_WIFI_CONNECTION_PLEASE_WAIT,
    DMWF_MSGSEQ_YOU_CANNOT_ACCESS_WIFI_CONNECTION_WITH_THIS_USER_NAME,
    DMWF_MSGSEQ_OK_TO_DISCONNECT_FROM_WIFI_CONNECTION,
    DMWF_MSGSEQ_DISCONNECTING_FROM_WIFI_CONNECTION,
    DMWF_MSGSEQ_YOU_HAVE_BEEN_DISCONNECTED_FROM_WIFI_CONNECTION,
    DMWF_MSGSEQ_YOU_CAN_USE_YOUR_DATA_AS_IS_BUT_FRIENDS_NEED_TO_BE_REREGISTERED,
    DMWF_MSGSEQ_YOU_MUST_SAVE_BEFORE_CHANGING_WFC_SETTINGS,
    DMWF_MSGSEQ_UNABLE_TO_CONNECT_TO_WIFI,
    DMWF_MSGSEQ_EITHER_WIFI_IS_EXPERIENCING_TRAFFIC_OR_SERVICE_IS_DOWN,
    DMWF_MSGSEQ_THIS_WIFI_CONNECTION_ID_HAS_BEEN_REMOVED_DUE_TO_INACTIVITY,
    DMWF_MSGSEQ_WIFI_CONNECTION_SERVICE_HAS_BEEN_DISCONTINUED,
    DMWF_MSGSEQ_THE_ACCESS_POINT_IS_BUSY,
    DMWF_MSGSEQ_NO_ACCESS_POINT_IN_RANGE,
    DMWF_MSGSEQ_NO_COMPATIBLE_ACCESS_POINT_IN_RANGE,
    DMWF_MSGSEQ_UNABLE_TO_CONNECT_TO_WIFI_USB_CONNECTOR,
    DMWF_MSGSEQ_UNABLE_TO_CONNECT_TO_THE_WIFI_CONNECTION,
    DMWF_MSGSEQ_THERE_IS_NO_RESPONCE,
    DMWF_MSGSEQ_COMMUNICATION_ERROR_YOU_HAVE_BEEN_DISCONNECTED,
    DMWF_MSGSEQ_COMMUNICATION_ERROR,
    DMWF_MSGSEQ_DOWNLOAD_FAILED,
    DMWF_MSGSEQ_ERROR_CODE,
    DMWF_MSGSEQ_ERRORCODE_DIGIT_0,
    DMWF_MSGSEQ_ERRORCODE_DIGIT_1,
    DMWF_MSGSEQ_ERRORCODE_DIGIT_2,
    DMWF_MSGSEQ_ERRORCODE_DIGIT_3,
    DMWF_MSGSEQ_ERRORCODE_DIGIT_4,
    DMWF_MSGSEQ_ERRORCODE_DIGIT_5,
    DMWF_MSGSEQ_ERRORCODE_DIGIT_6,
    DMWF_MSGSEQ_ERRORCODE_DIGIT_7,
    DMWF_MSGSEQ_ERRORCODE_DIGIT_8,
    DMWF_MSGSEQ_ERRORCODE_DIGIT_9,
    DMWF_MSGSEQ_COMMUNICATION_FAILED,
    DMWF_MSGSEQ_COULD_NOT_CONNECT_TO_SELECTED_PLAYER,
    DMWF_MSGSEQ_YOUR_OPPONENT_HAS_DISCONNECTED,
};

// --------------------
// STRUCTS
// --------------------

typedef struct NetworkErrorMenu_
{
  void *fontFile;
  void *archiveDmwfError;
  void *archiveDmwfLang;
  FontWindow fontWindow;
  FontAnimator fontAnimator;
  FontAnimator fontAnimator2;
  FontAnimator fntErrorCode[5];
  FontWindowAnimator fontWindowAnimator;
  AnimatorSprite aniNextPrompt;
  s32 disableNextPromptTimer;
} NetworkErrorMenu;

// --------------------
// FUNCTIONS
// --------------------

void InitNetworkErrorMenu(void);
void NetworkErrorMenu__Create(BOOL flag);
void NetworkErrorMenu__Destructor(Task *task);
void NetworkErrorMenu__Main(void);
u16 NetworkErrorMenu__GetErrorMessage(void);

#endif // RUSH_NETWORKERRORMENU_H